@use "sass:map";
@use "sass:math";

$w: 8;
$p: 100 / $w;
$h: ceil($w / 2);

$palette: (
  #FFCCAA
  #FF77A8
  #83769C
  #29ADFF
  #00E436
  #FFEC27
  #FFA300
  #FF004D
);

$waveFrames: ();
// @for $i from 0 through 128 {
@if (false) {
  $percent: #{$i * (100 / 128) * 1%};
  $boxShadow: ();

  @for $x from 1 through $w - 1 {
    @for $y from 1 through $w - 1 {
      $color: nth($palette, 1);

      $xo: abs($x - $h);
      $yo: abs($y - $h);

      $c: 0;
      @if $y < 4 {
        $c: 0 - $y - $i;
      } @else {
        $c: $y - $i;
      }

      $c: $c+abs(($w / 2) - $x);
      $c: $c%length($palette)+1;
      $color: nth($palette, $c);

      $size: 0;

      $show: false;

      @if $xo == 0 or $yo == 0 {
      } @else {
        $show: (
          ($xo + ($i % 7)
            !=
          $yo + ($i % 3))
        );
      }

      $dm: 8;
      $size: $xo
        * $dm + $yo
        * $dm * 2;

      @if $show {
        $boxShadow: append(
          $boxShadow,
          calc(
            #{$p * ($x - 1)}
            * 1vmin
          )
          calc(
            #{$p * ($y + 1)}
            * 1vmin
          )
          1vmin
          $color,
          $separator: comma,
        );
      }
    }
  }

  $waveFrames: map.set(
    $waveFrames,
    $percent,
    $boxShadow
  );
}

/*
$waveFrames: map.set(
  $waveFrames,
  0%,
  1vmin 50vmin 1vmin red
);

$waveFrames: map.set(
  $waveFrames,
  100%,
  1vmin 50vmin 1vmin blue
);
*/

$box-shadow: ();
@for $x from 1 through 9 {
  @for $y from 1 through 9 {
    $box-shadow: append(
      $box-shadow,
      #{$x * 10vmin}
      #{$y * 10vmin}
      4vmin
      nth($palette, ($x % 8) + 1),
      $separator: comma
    );
  }
}

@function point($x, $y, $c) {
  @return 
    #{($x * 10vmin) + 50vmin}
    #{($y * 10vmin) + 50vmin}
    1vmin
    $c
  ;
}


@function circle($r, $c) {
  $box-shadow: ();
  $f: 1 - $r;
  $ddF_x: 0;
  $ddF_y: -2 * $r;
  $x: 0;
  $y: $r;
  $points: ();

  $points: append($points, point(0, 0 + $r, $c), $separator: comma);
  $points: append($points, point(0, 0 - $r, $c), $separator: comma);
  $points: append($points, point(0 + $r, 0, $c), $separator: comma);
  $points: append($points, point(0 - $r, 0, $c), $separator: comma);

  @while $x < $y {
    @if $f >= 0 {
      $y: $y - 1;
      $ddF_y: $ddF_y + 2;
      $f: $f + $ddF_y;
    }
    $x: $x + 1;
    $ddF_y: $ddF_y + 2;
    $f: $f + $ddF_y + 1;

    $points: append($points, point(0 + $x, 0 + $y, $c), $separator: comma);
    $points: append($points, point(0 - $x, 0 + $y, $c), $separator: comma);
    $points: append($points, point(0 + $x, 0 - $y, $c), $separator: comma);
    $points: append($points, point(0 - $x, 0 - $y, $c), $separator: comma);

    $points: append($points, point(0 + $y, 0 + $x, $c), $separator: comma);
    $points: append($points, point(0 - $y, 0 + $x, $c), $separator: comma);
    $points: append($points, point(0 + $y, 0 - $x, $c), $separator: comma);
    $points: append($points, point(0 - $y, 0 - $x, $c), $separator: comma);
  }

  @return $points;
}

@debug circle(4, blue);

$waveFrames: map.set(
  $waveFrames,
  0%,
  circle(8, blue)
);

$waveFrames: map.set(
  $waveFrames,
  100%,
  circle(1, blue)
);

@keyframes spectrum {
  @each $percent, $boxShadow in $waveFrames {
    #{$percent} {
      box-shadow: $boxShadow;
    }
  }
}

html {
  overflow: hidden;
  background: #111;
}

body {
  margin: 0;
  width: 90vmin;
  height: 90vmin;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

body::after {
  content: "";
  position: absolute;
  top: -10vmin;
  left: -10vmin;
  height: 10vmin;
  width: 10vmin;
  border-radius: 50%;
  animation-name: spectrum;
  animation-duration: math.pow(2, 10) * 1ms;
  animation-direction: alternate;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}

/*
body::after {
  content: "";
  height: calc(#{$p} * 1vmin);
  width: calc(#{$p} * 1vmin);
  display: block;
  position: absolute;
  top: calc(#{$p} * -2vmin);
  border-radius: 50%;
  padding: calc(#{$p} * 0.5vmin);

  animation-name: spectrum;
  animation-duration: math.pow(2, 10) * 1ms;
  animation-direction: alternate;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}
*/
